{"version":3,"file":"commonHelpers.js","sources":["../src/main.js"],"sourcesContent":["import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nfunction searchImageByQuery(query) {\n  const URL = 'https://pixabay.com/api/';\n  const API_KEY = '45098523-0f66f1bf08e0be6a1e71621a5';\n\n  return fetch(\n    `${URL}?key=${API_KEY}&q=${query}&image_type=photo&orientation=horizontal&safesearch=true`\n  ).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\n\nconst searchForm = document.querySelector('.form-inline');\nconst imageContainer = document.querySelector('.image-container');\n\nsearchForm.addEventListener('submit', handleSearch);\n\nfunction handleSearch(event) {\n  event.preventDefault();\n\n  const form = event.currentTarget;\n  const queryValue = form.elements.query.value.trim().toLowerCase();\n\n  if (queryValue === '') {\n    iziToast.warning({\n      title: 'Warning',\n      message: 'Search query cannot be empty.',\n    });\n    return;\n  }\n\n  searchImageByQuery(queryValue)\n    .then(data => {\n      if (data.hits.length > 0) {\n        renderImages(data.hits);\n      } else {\n        iziToast.info({\n          title: 'Info',\n          message:\n            'Sorry, there are no images matching your search query. Please try again!',\n        });\n      }\n    })\n    .catch(onFetchError)\n    .finally(() => searchForm.reset());\n}\n\nfunction renderImages(images) {\n  imageContainer.innerHTML = '';\n  images.forEach(image => {\n    const imgCard = document.createElement('div');\n    imgCard.classList.add('image-card');\n    imgCard.innerHTML = `\n      <img src=\"${image.webformatURL}\" alt=\"${image.tags}\" />\n      <div class=\"info\">\n        <p><strong>Likes:</strong> ${image.likes}</p>\n        <p><strong>Views:</strong> ${image.views}</p>\n        <p><strong>Comments:</strong> ${image.comments}</p>\n        <p><strong>Downloads:</strong> ${image.downloads}</p>\n      </div>\n    `;\n    imageContainer.appendChild(imgCard);\n  });\n}\n\nfunction onFetchError(error) {\n  iziToast.error({\n    title: 'Error',\n    message: `Failed to fetch images: ${error.message}`,\n  });\n}\n"],"names":["searchImageByQuery","query","response","searchForm","imageContainer","handleSearch","event","queryValue","iziToast","data","renderImages","onFetchError","images","image","imgCard","error"],"mappings":"svBAGA,SAASA,EAAmBC,EAAO,CAIjC,OAAO,MACL,qEAA2BA,CAAK,0DACpC,EAAI,KAAKC,GAAY,CACjB,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAMA,EAAS,MAAM,EAEjC,OAAOA,EAAS,MACpB,CAAG,CACH,CAEA,MAAMC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAiB,SAAS,cAAc,kBAAkB,EAEhED,EAAW,iBAAiB,SAAUE,CAAY,EAElD,SAASA,EAAaC,EAAO,CAC3BA,EAAM,eAAc,EAGpB,MAAMC,EADOD,EAAM,cACK,SAAS,MAAM,MAAM,KAAI,EAAG,cAEpD,GAAIC,IAAe,GAAI,CACrBC,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,+BACf,CAAK,EACD,MACD,CAEDR,EAAmBO,CAAU,EAC1B,KAAKE,GAAQ,CACRA,EAAK,KAAK,OAAS,EACrBC,EAAaD,EAAK,IAAI,EAEtBD,EAAS,KAAK,CACZ,MAAO,OACP,QACE,0EACZ,CAAS,CAET,CAAK,EACA,MAAMG,CAAY,EAClB,QAAQ,IAAMR,EAAW,MAAK,CAAE,CACrC,CAEA,SAASO,EAAaE,EAAQ,CAC5BR,EAAe,UAAY,GAC3BQ,EAAO,QAAQC,GAAS,CACtB,MAAMC,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAU,IAAI,YAAY,EAClCA,EAAQ,UAAY;AAAA,kBACND,EAAM,YAAY,UAAUA,EAAM,IAAI;AAAA;AAAA,qCAEnBA,EAAM,KAAK;AAAA,qCACXA,EAAM,KAAK;AAAA,wCACRA,EAAM,QAAQ;AAAA,yCACbA,EAAM,SAAS;AAAA;AAAA,MAGpDT,EAAe,YAAYU,CAAO,CACtC,CAAG,CACH,CAEA,SAASH,EAAaI,EAAO,CAC3BP,EAAS,MAAM,CACb,MAAO,QACP,QAAS,2BAA2BO,EAAM,OAAO,EACrD,CAAG,CACH"}